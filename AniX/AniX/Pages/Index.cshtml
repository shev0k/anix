@page
@model IndexModel
@{
    ViewData["Title"] = "AniX";
}
<style>
    .anime-cover {
        width: 746px;
        height: 600px;
        object-fit: cover;
    }

    }</style>

@functions {
    public static string TruncateDescription(string description, int maxLength = 150)
    {
        if (string.IsNullOrEmpty(description)) return description;
        return description.Length <= maxLength ? description : description.Substring(0, maxLength) + "...";
    }
    public static string TruncateTitle(string title, int maxLength = 25)
    {
        if (string.IsNullOrEmpty(title)) return title;
        return title.Length <= maxLength ? title : title.Substring(0, maxLength) + "...";
    }

    public static string TruncateRating(double? rating, int maxLength = 4)
    {
        if (rating == null) return "TBA";
        string formattedRating = rating.Value.ToString("F2", System.Globalization.CultureInfo.InvariantCulture);
        return formattedRating.Length <= maxLength ? formattedRating : formattedRating.Substring(0, maxLength);
    }

    private string GetRankClass(int rank)
    {
        return rank switch
        {
            1 => "light-text text-center color-yellow",
            2 => "light-text text-center color-purple",
            3 => "light-text text-center color-grey",
            _ => "light-text text-center"
        };
    }
}

<!--=====================================-->
<!--=        Banner Area Start          =-->
<!--=====================================-->
<section class="banner style-1 banner-slider">
    @foreach (var anime in Model.FeaturedAnimes)
    {
        var backgroundStyle = $"background: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('{anime.CoverImage}'); background-repeat: no-repeat; background-size: cover;";
        <div class="banner-block overflow-hidden" style="@backgroundStyle">
            <div class="container">
                <div class="banner-content">
                    <div class="row ">
                        <div class="col-lg-5 col-12">
                            <h2 class="title">@TruncateTitle(anime.Name)</h2>
                            <p class="text">Season @anime.Season</p>
                            <a href="@Url.Page("/watch", new { id = anime.Id })" class="text-box active">@anime.Rating</a>
                            <a href="@Url.Page("/watch", new { id = anime.Id })" class="text-box">★ @TruncateRating(anime.AverageRating)</a>
                            <a href="@Url.Page("/watch", new { id = anime.Id })" class="text-box">@anime.Type</a>
                            <p class="light-text">@anime.ReleaseDate?.ToString("MMMM dd, yyyy")</p>
                            <p>@TruncateDescription(anime.Description)</p>
                            <a class="banner-btn" href="@Url.Page("/watch", new { id = anime.Id })">PLAY NOW</a>
                        </div>
                        <div class="col-lg-7 col-12">
                            <img src="@anime.CoverImage" alt="@anime.Name" class="anime-cover">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</section>
<!--=====================================-->
<!--=        Recent Area Start          =-->
<!--=====================================-->
<section class="recent sec-mar">
    <div class="container">
        <div class="heading style-1">
            <h2>Recently Updated <span>@DateTime.Now.ToString("dddd dd MMM yyyy")</span></h2>
        </div>
        <div class="row">
            @foreach (var anime in Model.RecentlyUpdatedAnimes)
            {
                <div class="col-xl-3 col-lg-4 col-sm-6 col-12">
                    <div class="anime-blog">
                        <a href="@Url.Page("/watch", new { id = anime.Id })" class="img-block">
                            <img src="@anime.Thumbnail" alt="@anime.Name" class="anime-image">
                        </a>
                        <a href="@Url.Page("/watch", new { id = anime.Id })" class="action-overlay"><i class="fal fa-play-circle"></i> Play Now</a>
                        <div class="detail">
                            <div class="tags">
                                <a href="@Url.Page("/watch", new { id = anime.Id })" class="text-box">★ @TruncateRating(anime.AverageRating)</a>
                                <a href="@Url.Page("/watch", new { id = anime.Id })" class="text-box active">@anime.Type</a>
                            </div>
                        </div>
                        <a href="@Url.Page("/watch", new { id = anime.Id })">
                            <p>@anime.Name</p>
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</section>
<!--=====================================-->
<!--=        Coming out Area Start     =-->
<!--=====================================-->
@if (Model.UpcomingAnime != null && Model.UpcomingAnime.ReleaseDate.HasValue && Model.UpcomingAnime.ReleaseDate.Value > DateTime.Now)
{
    <section class="coming-out style-1 sec-mar sec-pad" style="background: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('@Model.UpcomingAnime.CoverImage'); background-size: cover;">
        <div class="container">
            <div class="comingOut-content">
                <h2 class="title">@Model.UpcomingAnime.Name</h2>
                <p class="light-text">Season @Model.UpcomingAnime.Season</p>
                <p class="text">@string.Join(", ", Model.UpcomingAnime.Genres)</p>
                <a href="@Model.UpcomingAnime.TrailerLink" class="text-box active">@Model.UpcomingAnime.Rating</a>
                <a href="@Model.UpcomingAnime.TrailerLink" class="text-box">★ @TruncateRating(Model.UpcomingAnime.AverageRating)</a>
                <a href="@Model.UpcomingAnime.TrailerLink" class="text-box">@Model.UpcomingAnime.Type</a>
                <p class="copyright-text">Coming Out in</p>
                <ul class="timer countdown" id="countdown">
                    <li><span id="days">00</span><small>d</small></li>
                    <li><span id="hours">00</span><small>h</small></li>
                    <li><span id="minutes">00</span><small>m</small></li>
                    <li><span id="seconds">00</span><small>s</small></li>
                </ul>
            </div>
        </div>
    </section>
}
<!--=====================================-->
<!--=        Popular Anime Area Start =-->
<!--=====================================-->
<section class="popular sec-mar">
    <div class="container">
        <div class="heading style-1">
            <h2>Popular Anime</h2>
        </div>
        <div class="row">
            @foreach (var anime in Model.PopularAnimes.Take(4))
            {
                <div class="col-xl-3 col-lg-4 col-sm-6 col-12">
                    <div class="anime-blog">
                        <a href="@Url.Page("/watch", new { id = anime.Id })" class="img-block">
                            <img src="@anime.Thumbnail" alt="@anime.Name" class="anime-image">
                        </a>
                        <a href="@Url.Page("/watch", new { id = anime.Id })" class="action-overlay"><i class="fal fa-play-circle"></i> Play Now</a>
                        <div class="detail">
                            <div class="tags">
                                <a href="@Url.Page("/watch", new { id = anime.Id })" class="text-box">★ @TruncateRating(anime.AverageRating)</a>
                                <a href="@Url.Page("/watch", new { id = anime.Id })" class="text-box active">@anime.Type</a>
                            </div>
                        </div>
                        <a href="@Url.Page("/watch", new { id = anime.Id })">
                            <p>@anime.Name</p>
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</section>
<!--=====================================-->
<!--=           top Area Start          =-->
<!--=====================================-->
<section class="top sec-mar">
    <div class="container">
        <div class="row">
            <div class="col-xl-4 col-lg-6 col-md-6 col-sm-8 offset-xl-0 offset-lg-0 offset-md-0 offset-sm-2 col-12">
                <h3>Top Watched</h3>
                @for (int i = 0; i < Model.TopWatchedAnimes.Count && i < 6; i++)
                {
                    var anime = Model.TopWatchedAnimes[i];
                    string rankClass = GetRankClass(i + 1);

                    <div class="anime-box bg-color-black">
                        <a href="@Url.Page("/watch", new { id = anime.Id })">
                            <div class="row m-0">
                                <div class="p-0 col-2">
                                    <span class="@rankClass">@((i + 1).ToString())</span>
                                </div>
                                <div class="p-0 col-2">
                                    <img src="@anime.Thumbnail" class="anime-blog-image" alt="@anime.Name">
                                </div>
                                <div class="p-0 col-6">
                                    <div class="anime-blog">
                                        <p>@anime.Name</p>
                                        <p class="text-box">★ @TruncateRating(anime.AverageRating)</p>
                                        <p class="text-box">@anime.Rating</p>
                                    </div>
                                </div>
                                <div class="p-0 col-2 show-type">
                                    <span class="show-type">@anime.Type</span>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>

            <div class="col-xl-4 col-lg-6 col-md-6 col-sm-8 offset-xl-0 offset-lg-0 offset-md-0 offset-sm-2 col-12">
                <h3>Recently Released</h3>
                @foreach (var anime in Model.NewlyReleasedAnimes)
                {
                    <div class="anime-box bg-color-black">
                        <a href="@Url.Page("/watch", new { id = anime.Id })">
                            <div class="row m-0">
                                <div class="col-2 p-0">
                                    <img src="@anime.Thumbnail" class="anime-blog-image" alt="@anime.Name">
                                </div>
                                <div class="col-8 p-0">
                                    <div class="anime-blog">
                                        <p>@anime.Name</p>
                                        <p class="text-box">★ @TruncateRating(anime.AverageRating)</p>
                                        <p class="text-box">@anime.Rating</p>
                                    </div>
                                </div>
                                <div class="col-2 p-0 show-type">
                                    <span class="show-type">@anime.Type</span>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>

            <div class="col-xl-4 col-lg-6 col-md-6 col-sm-8 offset-xl-0 offset-lg-3 offset-md-3 offset-sm-2 col-12">
                <h3>Top Rated</h3>
                @foreach (var anime in Model.TopRatedAnime)
                {
                    <div class="anime-box bg-color-black">
                        <a href="@Url.Page("/watch", new { id = anime.Id })">
                            <div class="row m-0">
                                <div class="col-2 p-0">
                                    <img src="@anime.Thumbnail" class="anime-blog-image" alt="@anime.Name">
                                </div>
                                <div class="col-8 p-0">
                                    <div class="anime-blog">
                                        <p>@anime.Name</p>
                                        <p class="text-box">★ @TruncateRating(anime.AverageRating)</p>
                                        <p class="text-box">@anime.Rating</p>
                                    </div>
                                </div>
                                <div class="col-2 p-0 show-type">
                                    <span class="show-type">@anime.Type</span>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Check if the release date is available and valid
            var releaseDateString = '@(Model.UpcomingAnime?.ReleaseDate?.ToString("yyyy-MM-dd"))';
            if (releaseDateString && new Date(releaseDateString) > new Date()) {
                var releaseDate = new Date(releaseDateString + "T00:00:00Z").getTime();

                function updateCountdown() {
                    var now = new Date().getTime();
                    var distance = releaseDate - now;

                    // Time calculations
                    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                    // Display the result
                    if (distance >= 0) {
                        document.querySelector('#countdown').innerHTML =
                            '<li>' + days + '<small>d</small></li>' +
                            '<li>' + hours + '<small>h</small></li>' +
                            '<li>' + minutes + '<small>m</small></li>' +
                            '<li>' + seconds + '<small>s</small></li>';
                    } else {
                        clearInterval(x);
                        document.querySelector('#countdown').innerHTML = 'Released';
                    }
                }

                // Update the countdown every second
                var x = setInterval(updateCountdown, 1000);
                updateCountdown(); // Call immediately to avoid delay
            }
        });
    </script>
}